function [net,label_juanji,score_juanji,featuresTrain_juanji,featuresTest_juanji,atimes]=googlenet21(net,numClasses,imdsTrain,Trainimage,imdsTest)
% net=googlenet;
if isa(net,'SeriesNetwork') 
  lgraph = layerGraph(net.Layers); 
else
  lgraph = layerGraph(net); 
end 

[learnableLayer,classLayer] = findLayersToReplace(lgraph);
inputSize = net.Layers(1).InputSize;
% numClasses = numel(categories(imdsTrain.Labels));
% imds = imageDatastore(imgpath, ...
%     'IncludeSubfolders',true, ...
%     'LabelSource','foldernames');



if isa(learnableLayer,'nnet.cnn.layer.FullyConnectedLayer')
    newLearnableLayer = fullyConnectedLayer(numClasses, ...
        'Name','new_fc', ...
        'WeightLearnRateFactor',10, ...
        'BiasLearnRateFactor',10);
    
elseif isa(learnableLayer,'nnet.cnn.layer.Convolution2DLayer')
    newLearnableLayer = convolution2dLayer(1,numClasses, ...
        'Name','new_conv', ...
        'WeightLearnRateFactor',10, ...
        'BiasLearnRateFactor',10);
end
lgraph = replaceLayer(lgraph,learnableLayer.Name,newLearnableLayer);
% analyzeNetwork
newClassLayer = classificationLayer('Name','new_classoutput');
lgraph = replaceLayer(lgraph,classLayer.Name,newClassLayer);
pixelRange = [-30 30];
scaleRange = [0.9 1.1];
imageAugmenter = imageDataAugmenter( ...
    'RandXReflection',true, ...
    'RandXTranslation',pixelRange, ...
    'RandYTranslation',pixelRange, ...
    'RandXScale',scaleRange, ...
    'RandYScale',scaleRange);
augimdsTrain = augmentedImageDatastore(inputSize(1:2),imdsTrain, ...
    'DataAugmentation',imageAugmenter);
augimdsValidation = augmentedImageDatastore(inputSize(1:2),imdsTest);
augimdstrain = augmentedImageDatastore(inputSize(1:2),Trainimage);
miniBatchSize = 64;
% valFrequency = floor(numel(augimdsTrain.Files)/miniBatchSize);
valFrequency = floor(numel(augimdsTrain.Files)/miniBatchSize);
options = trainingOptions('sgdm', ...
    'MiniBatchSize',miniBatchSize, ...
    'MaxEpochs',10, ...
    'InitialLearnRate',3e-4, ...
    'Shuffle','every-epoch', ...
    'ValidationData',augimdsValidation, ...
    'ValidationFrequency',valFrequency, ...
    'Verbose',1, ...
    'Plots','none');
% %training-progress
%     'ValidationData',augimdsValidation, ...
% training-progress
tic
net = trainNetwork(augimdsTrain,lgraph,options);
atimes=toc;
[label_juanji,score_juanji]=classify(net,augimdsValidation);

%new_fc
%pool5-7x7_s1
% deepNetworkDesigner  
featureslayer='new_fc';
featuresTrain_juanji = activations(net,augimdstrain,featureslayer,'OutputAs','rows');
featuresTest_juanji =activations(net,augimdsValidation,featureslayer,'OutputAs','rows');
clear googlenet21
end